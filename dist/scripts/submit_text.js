// Generated by CoffeeScript 1.9.2
var DiffSubmitter, Header, LOADER, ResultText, Selectable, TO_DIFFER_API, TXT_FETCH_API;

TXT_FETCH_API = "https://text-fetch.herokuapp.com";

TO_DIFFER_API = "https://todiffer.herokuapp.com/texts";

LOADER = chrome.extension.getURL("images/loader.gif");

DiffSubmitter = React.createClass({
  getInitialState: function() {
    return {
      status: 'initial',
      header_text: 'Looking for text...',
      text: '',
      title: '',
      loading: true,
      url: window.location.href,
      selector: null
    };
  },
  handleResponse: function(response) {
    console.log(response);
    return this.setState({
      status: 'confirm',
      header_text: 'Is this what you want to track?',
      text: response.text,
      title: response.title,
      url: response.url,
      loading: false
    });
  },
  confirm: function(params) {
    this.setState({
      loading: true,
      header_text: 'Saving...',
      status: 'saving'
    });
    params = {
      text: {
        url: this.state.url,
        selector: this.state.selector
      }
    };
    return $.ajax({
      method: "POST",
      url: TO_DIFFER_API,
      data: params,
      success: (function(_this) {
        return function(response) {
          _this.setState({
            status: "done",
            header_text: "Tracking text.",
            loading: false
          });
          return _this.cleanup();
        };
      })(this),
      error: (function(_this) {
        return function(err) {
          console.log(err);
          _this.setState({
            status: "error",
            header_text: "Something went wrong saving the text.",
            loading: false
          });
          return _this.cleanup();
        };
      })(this)
    });
  },
  cleanup: function() {
    return setTimeout(function() {
      return $('#todiffer_overlay').fadeOut(function() {
        return this.remove();
      });
    }, 2500);
  },
  useSelector: function() {
    this.setState({
      status: "selector",
      header_text: "Select the area containing the text you want to track."
    });
    return Selectable.init((function(_this) {
      return function(selector) {
        _this.setState({
          selector: selector,
          header_text: 'Looking for text...'
        });
        return _this.fetchText();
      };
    })(this));
  },
  fetchText: function() {
    var params;
    this.setState({
      loading: true
    });
    params = {
      url: this.state.url,
      selector: this.state.selector
    };
    return $.ajax({
      method: "POST",
      url: TXT_FETCH_API,
      data: params,
      success: (function(_this) {
        return function(response) {
          return _this.handleResponse(response);
        };
      })(this),
      error: (function(_this) {
        return function(err) {
          console.log(err);
          return _this.setState({
            status: "error",
            header_text: "Something went wrong fetching the text.",
            loading: false
          });
        };
      })(this)
    });
  },
  componentDidMount: function() {
    return this.fetchText();
  },
  render: function() {
    return React.createElement("div", null, React.createElement(ResultText, {
      "text": this.state.text,
      "title": this.state.title,
      "status": this.state.status
    }), React.createElement(Header, {
      "text": this.state.header_text,
      "status": this.state.status,
      "confirm": this.confirm,
      "useSelector": this.useSelector,
      "loading": this.state.loading
    }));
  }
});

ResultText = React.createClass({
  render: function() {
    if (this.props.status !== 'confirm') {
      return React.createElement("div", null);
    } else {
      return React.createElement("div", {
        "className": "result"
      }, React.createElement("div", {
        "className": "container"
      }, React.createElement("h4", null, this.props.title), React.createElement("div", {
        "className": "text",
        "dangerouslySetInnerHTML": {
          __html: this.props.text
        }
      })));
    }
  }
});

Header = React.createClass({
  handleYes: function() {
    return this.props.confirm();
  },
  handleNo: function() {
    return this.props.useSelector();
  },
  render: function() {
    return React.createElement("div", {
      "className": "status"
    }, React.createElement("h4", null, this.props.text), React.createElement("img", {
      "src": LOADER,
      "className": (this.props.loading ? '' : 'hide')
    }), React.createElement("div", {
      "className": "confirmation " + (this.props.status === 'confirm' ? '' : 'hide')
    }, React.createElement("button", {
      "onClick": this.handleYes
    }, "Yes"), React.createElement("button", {
      "onClick": this.handleNo
    }, "No")));
  }
});

$('body').prepend('<div id="todiffer_overlay"></div>');

React.render(React.createElement(DiffSubmitter, null), document.getElementById('todiffer_overlay'));

Selectable = {
  init: function(callback) {
    var prevElement;
    this.callback = callback;
    prevElement = null;
    $(document).on('mousemove', function(e) {
      var $el, elem;
      elem = e.target || e.srcElement;
      $el = $(elem);
      if ($el.parents('#todiffer_overlay').length) {
        return;
      }
      if (prevElement !== null) {
        prevElement.classList.remove("mouseOn");
      }
      elem.classList.add("mouseOn");
      return prevElement = elem;
    });
    return $(document).on('click', (function(_this) {
      return function(e) {
        _this.elementChosen(e);
        return false;
      };
    })(this));
  },
  elementChosen: function(e) {
    var elem, selectors;
    $(document).off('mousemove');
    $(document).off('click');
    elem = e.target || e.srcElement;
    selectors = this.getSelectors(elem).replace(/\.+/g, '.');
    return this.callback(selectors);
  },
  getSelectors: function(el) {
    var $el, classNames, id, selector;
    $el = $(el);
    selector = "";
    selector += $el.parents().map(function() {
      return this.tagName.toLowerCase();
    }).get().reverse().join(" ");
    if (selector) {
      selector += " " + $el[0].nodeName.toLowerCase();
    }
    id = $el.attr("id");
    if (id) {
      selector += "#" + id;
    }
    classNames = $el.attr("class");
    if (classNames) {
      selector += "." + $.trim(classNames).replace(/\s/gi, ".");
    }
    selector = selector.replace('.mouseOn', '');
    return selector;
  }
};
